//Project3: getPageInfo
SYSCALL_DEFINE1(getPageInfo, int, targetPid)
{
        struct task_struct *p;
        struct mm_struct *mms;
        struct vm_area_struct *vas;

        int present;
        int dirty;
        int reference;
        unsigned long address;
        int index = 1;
	
	pgd_t *pgd;
	p4d_t *p4d;
	pud_t *pud;
	pmd_t *pmd;
	pte_t pte;

        if(!(p = find_task_by_vpid(targetPid))){
                printk("Can not find the task %d\n\n", targetPid);
                return 0;
        } else {
                printk("Find the task %d\n\n", targetPid);
                mms = p->mm;
                vas = mms->mmap;
        }


	while(vas != NULL)
	{
		address = vas->vm_start;

		pgd = pgd_offset(mms, address);
		
		p4d = p4d_offset(pgd, address);
		
		pud = pud_offset(p4d, address);
		
		pmd = pmd_offset(pud, address);
		
		pte = *pte_offset_kernel(pmd, address);

		printk("This is vm_area_struct number: %d\n", index);
		
		if(pte_present(pte) == 1)
			printk("The page is in the memory!\n");
		else
			printk("The page is not in the memory.\n");

		if(pte_young(pte) == 1)
			printk("The page is referenced!\n");
		else
			printk("The page is not referenced.\n");

		if(pte_dirty(pte) == 1)
			printk("The page is dirty!\n");
		else
			printk("The page is not dirty.\n");

		vas = vas->vm_next;
		index++;
	}

        return 0;
}
